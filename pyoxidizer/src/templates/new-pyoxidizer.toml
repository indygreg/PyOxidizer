# This file controls the PyOxidizer build configuration. See the
# pyoxidizer crate's documentation for extensive documentation
# on this file format.

[[build]]
application_name = "{{program_name}}"

[[embedded_python_config]]
raw_allocator = "jemalloc"

# dont_write_bytecode = true
# ignore_environment = true
# no_site = true
# no_user_site_directory = true
# optimize_level = 0
# stdio_encoding = "utf-8:strict"
# unbuffered_stdio = false
#write_modules_directory_env = "PYOXIDIZER_WRITE_MODULES_DIR"

# Windows doesn't support jemalloc.
[[embedded_python_config]]
build_target = "x86_64-pc-windows-msvc"
raw_allocator = "system"

[[packaging_rule]]
type = "stdlib-extensions-policy"

# Package all available extension modules from the Python distribution.
# The Python interpreter will be fully featured.
policy = "all"

# Only package the minimal set of extension modules needed to initialize
# a Python interpreter. Many common packages in Python's standard
# library won't work with this setting.
# policy = "minimal"

# Only package extension modules that don't require linking against
# non-Python libraries. e.g. will exclude support for OpenSSL, SQLite3,
# other features that require external libraries.
# policy = "no-libraries"

# Explicit list of extension modules from the distribution to include.
# [[packaging_rule]]
# type = "stdlib-extensions-explicit-includes"
# includes = ["binascii", "errno", "itertools", "math", "select", "_socket"]

# Explicit list of extension modules from the distribution to exclude.
# [[packaging_rule]
# type = "stdlib-extensions-explicit-excludes"
# excludes = ["_ssl"]

# Package the entire Python standard library without sources.
[[packaging_rule]]
type = "stdlib"
include_source = false

# Write out license files next to the produced binary.
[[packaging_rule]]
type = "write-license-files"
path = ""
{{#each pip_install_simple}}
[[packaging_rule]]
type = "pip-install-simple"
package = "{{{ this }}}"
{{/each}}
# Package .py files discovered in a local directory.
# [[packaging_rule]]
# type = "package-root"
# path = "/src/mypackage"
# packages = ["foo", "bar"]

# Package things from a populated virtualenv.
# [[packaging_rule]]
# type = "virtualenv"
# path = "/path/to/venv"

# Filter all resources collected so far through a filter of names
# in a file.
# [[packaging_rule]]
# type = "filter-include"
# files = ["/path/to/filter-file"]

# How Python should run by default. This is only needed if you
# call ``run()``. For applications customizing how the embedded
# Python interpreter is invoked, this section is not relevant.
[[embedded_python_run]]
# Run an interactive Python interpreter.
{{#unless code~}}
mode = "repl"
{{~else~}}
# mode = "repl"
{{~/unless}}

# Import a Python module and run it.
#mode = "module"
#module = "mypackage.__main__"

# Evaluate some Python code.
{{#if code~}}
mode = "eval"
code = {{{code}}}
{{~else~}}
#mode = "eval"
#code = "from mypackage import main; main()"
{{~/if}}

# END OF COMMON USER-ADJUSTED SETTINGS.
#
# Everything below this is typically managed by PyOxidizer and doesn't need
# to be updated by people.

{{#each python_distributions ~}}
[[python_distribution]]
build_target = "{{{ this.build_target }}}"
url = "{{{ this.url }}}"
sha256 = "{{{ this.sha256 }}}"
{{/each}}

[[pyoxidizer]]
version = "{{{ pyoxidizer_version }}}"
commit = "{{{ pyoxidizer_commit }}}"
